{{- $cluster := .Values.cluster -}}
#This is the copy of frontend that isn't in the mesh
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: default
  labels:
    app: frontend
    version: v1
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8888
    name: http
  selector:
    app: frontend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: default
  labels:
    app: frontend
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
      version: v1
  template:
    metadata:
      labels:
        app: frontend
        version: v1
    spec:
      containers:
      - name: frontend
        image: gcr.io/abz-perm/frontend-demo:latest
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 50m
            memory: 16Mi
          requests:
            cpu: 10m
            memory: 4Mi
        ports:
        - containerPort: 8888
        env:
        - name: PORT
          value: "8888"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INJECTION
          value: "disabled"
        - name: CLUSTER
          value: {{ $cluster }}
{{- range .Values.environments }}
---
apiVersion: v1
kind: Namespace
metadata:
  name: {{ . }}-app
  labels:
    istio-injection: enabled
---
apiVersion: v1
kind: Namespace
metadata:
  name: {{ . }}-security
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: {{ . }}-app
  labels:
    app: frontend
    version: v1
spec:
  ports:
  - port: 8888
    name: http
  selector:
    app: frontend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: {{ . }}-app
  labels:
    app: frontend
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
      version: v1
  template:
    metadata:
      labels:
        app: frontend
        version: v1
    spec:
      containers:
      - name: frontend
        image: gcr.io/abz-perm/frontend-demo:latest
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 50m
            memory: 16Mi
          requests:
            cpu: 10m
            memory: 4Mi
        ports:
        - containerPort: 8888
        env:
        - name: PORT
          value: "8888"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INJECTION
          value: "enabled"
        - name: CLUSTER
          value: {{ $cluster }}
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: {{ . }}-app
  labels:
    app: backend
    version: v1
spec:
  ports:
  - port: 8080
    name: http-main
  - port: 80
    targetPort: 8888
    name: http-cats
  selector:
    app: backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: {{ . }}-app
  labels:
    app: backend
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
      version: v1
  template:
    metadata:
      labels:
        app: backend
        version: v1
    spec:
      containers:
      - name: backend
        image: gcr.io/abz-perm/backend-demo:latest
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 50m
            memory: 16Mi
          requests:
            cpu: 10m
            memory: 4Mi
        ports:
        - containerPort: 8080
        - containerPort: 8888
        env:
        - name: PORT
          value: "8080"
        - name: GOPACKAGENAME
          value: "example-apps/cats-and-dogs-with-service-discovery/backend"
        - name: CATS_PORTS
          value: "8888"
        - name: UDP_PORTS
          value: "9001,9002,9003"
        - name: CLUSTER
          value: {{ $cluster }}
        - name: IMG
          value: "https://i.imgur.com/1uYroRF.gif"
        # - name: LATENCY
        #   value: "2"
---
apiVersion: install.tetrate.io/v1alpha1
kind: IngressGateway
metadata:
  name: {{ . }}-app-gateway
  namespace: {{ . }}-app
spec:
  kubeSpec:
    service:
      type: LoadBalancer
      annotations:
        "external-dns.alpha.kubernetes.io/hostname": "frontend-{{ . }}.{{ $cluster }}.kubecon.cx.tetrate.info."
---
apiVersion: install.tetrate.io/v1alpha1
kind: EgressGateway
metadata:
  name: {{ . }}-cluster-egress
  namespace: {{ . }}-security
spec:
  kubeSpec:
    service:
      type: ClusterIP
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: frontend
  namespace: {{ . }}-app
spec:
  secretName: frontend-cert
  issuerRef:
    name: letsencrypt-dns-cluster-issuer
    kind: ClusterIssuer
  dnsNames:
    - frontend-{{ . }}.{{ $cluster }}.kubecon.cx.tetrate.info
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ . }}-frontend
  name: {{ . }}-frontend
  namespace: trafficgenerator
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      app: {{ . }}-frontend
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ . }}-frontend
    spec:
      containers:
      - args:
        - /bin/sh
        - -c
        - "while true; do curl -v -k https://frontend-{{ . }}.{{ $cluster }}.kubecon.cx.tetrate.info/proxy/\\?url\\=backend.{{ . }}.mesh\\&auth\\=\\&cachebuster\\=123456; sleep 10; done"
        image: appropriate/curl
        imagePullPolicy: Always
        name: trafficgenerator
        resources:
          limits:
            cpu: 50m
            memory: 16Mi
          requests:
            cpu: 10m
            memory: 4Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
{{- end }}